// Generated by CoffeeScript 1.10.0
(function() {
  var analyzeSelectedDirectory, dialog, electron, excludedFiles, excludedFilesCell, fs, isRelevant, relevantFiles, relevantFilesCell, remote, resetFileCounts, runLink, selectDirectoryLink, selectedDirectory, selectedDirectorySpan, skippedFilesCell, totalFiles, totalFilesCell, updateFileCountDisplay, verifySelectedDirectory;

  electron = require('electron');

  remote = electron.remote;

  dialog = remote.dialog;

  fs = require('fs');

  selectDirectoryLink = document.querySelector('#pick-directory');

  selectedDirectorySpan = document.querySelector('#selected-directory');

  runLink = document.querySelector('#run');

  totalFilesCell = document.querySelector('#total-files');

  relevantFilesCell = document.querySelector('#relevant-files');

  skippedFilesCell = document.querySelector('#skipped-files');

  excludedFilesCell = document.querySelector('#excluded-files');

  totalFiles = null;

  relevantFiles = null;

  selectedDirectory = null;

  excludedFiles = ['Thumbs.db', '.DS_Store'];

  excludedFilesCell.innerHTML = excludedFiles.join(", ");

  selectDirectoryLink.onclick = function() {
    var dirs;
    dirs = dialog.showOpenDialog({
      properties: ['openDirectory']
    });
    selectedDirectory = dirs[0];
    return selectedDirectorySpan.innerHTML = dirs[0];
  };

  runLink.onclick = function() {
    verifySelectedDirectory();
    resetFileCounts();
    updateFileCountDisplay();
    return analyzeSelectedDirectory();
  };

  resetFileCounts = function() {
    totalFiles = 0;
    return relevantFiles = 0;
  };

  updateFileCountDisplay = function() {
    totalFilesCell.innerHTML = totalFiles;
    relevantFilesCell.innerHTML = relevantFiles;
    return skippedFilesCell.innerHTML = totalFiles - relevantFiles;
  };

  verifySelectedDirectory = function() {
    var okay;
    okay = false;
    try {
      return okay = fs.statSync(selectedDirectory).isDirectory();
    } finally {
      if (!okay) {
        alert("Bad directory selected: " + selectedDirectory);
      }
    }
  };

  analyzeSelectedDirectory = function() {
    var currentDirectory, directoryStack, entry, full_entry, i, len, ref, results, stat;
    directoryStack = [selectedDirectory];
    currentDirectory = null;
    results = [];
    while ((currentDirectory = directoryStack.pop())) {
      ref = fs.readdirSync(currentDirectory);
      for (i = 0, len = ref.length; i < len; i++) {
        entry = ref[i];
        full_entry = currentDirectory + '/' + entry;
        stat = fs.lstatSync(full_entry);
        if (stat.isDirectory()) {
          directoryStack.push(full_entry);
        } else if (stat.isFile()) {
          totalFiles += 1;
          if (isRelevant(entry)) {
            relevantFiles += 1;
          }
        }
      }
      results.push(updateFileCountDisplay());
    }
    return results;
  };

  isRelevant = function(entry) {
    return !excludedFiles.includes(entry);
  };

}).call(this);

//# sourceMappingURL=index.js.map
